---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/eyalev18/Recipes/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
      - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: the user has ben successfully logged out
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_favorites_body'
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/FamilyRecipes:
    get:
      tags:
      - Users
      summary: Return the family recipes for the user
      description: Get an array of family recipes
      responses:
        "200":
          description: data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipes'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the family recipes list of a user
      description: save recipe in the  family recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRecipes'
        required: true
      responses:
        "200":
          description: The family recipe was successfully uploaded
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/MyRecipes:
    get:
      tags:
      - Users
      summary: Return the family recipes for the user
      description: Get an array of family recipes
      responses:
        "200":
          description: data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipes'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the family recipes list of a user
      description: save recipe in the  family recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyRecipes'
        required: true
      responses:
        "200":
          description: The family recipe was successfully uploaded
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/LastViewed:
    get:
      tags:
      - Users
      summary: Return the last viewed recipes by the user
      description: Get an array of family recipes
      responses:
        "200":
          description: data about the user's last viewed recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the watched recipes list of a user
      description: save recipe in the watched recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_LastViewed_body'
      responses:
        "200":
          description: The family recipe was successfully uploaded
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/MyRecipes/{recipeId}:
    get:
      tags:
      - Users
      summary: Return Full details on recipe by his ID
      description: Return Full details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
        "404":
          description: recipeId is not exists
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/FullRecipe/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return Full details on recipe by his ID
      description: Return Full details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
        "404":
          description: recipeId is not exists
  /recipes/{recipeName}/{number}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his Name
      description: Return preview details on recipe by his Name
      parameters:
      - name: recipeName
        in: path
        description: recipe's Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: number
        in: path
        description: number of recipes
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeName does not exists
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Return Three Random Recipes
      description: Get an array of Three Random Recipes
      responses:
        "200":
          description: data about Three Random Recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
components:
  schemas:
    user:
      required:
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains 3-8 characters
          example: Roni
        firstname:
          type: string
          example: Roni
        lastname:
          type: string
          example: batanist
        country:
          type: string
          example: afghanistan
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password contains 5-10 characters, one number and one special char
          format: password
          example: Eyal12$
        email:
          type: string
          description: user email
          format: email
          example: eyalev@post.bgu.ac.il
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    FullRecipe:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        extendedIngredients:
          type: string
          description: Full Ingredients
          example: cheese,tomato
        instructions:
          type: string
          description: Full instruction
          example: cut cheese,cut tomato
        servings:
          type: integer
          description: how many portions
          example: 3
    FamilyRecipes:
      type: object
      properties:
        recipe_name:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image_url:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        time_to_make:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        is_vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        is_vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        contains_gluten:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        ingredients:
          type: string
          description: Full Ingredients
          example: cheese,tomato
        instructions:
          type: string
          description: Full instruction
          example: cut cheese,cut tomato
        number_of_portions:
          type: integer
          description: how many portions
          example: 3
    users_favorites_body:
      type: object
      properties:
        reciepeId:
          type: string
          description: reciepe's id which the user saved
          example: "716429"
    users_LastViewed_body:
      type: object
      properties:
        reciepeId:
          type: string
          description: reciepe's id which the user watche
          example: "716429"
  securitySchemes:
    cookieAuth:
      type: http
      scheme: cookie
